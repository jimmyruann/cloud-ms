generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["auth", "public"]
}

model gotrue_audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@map("audit_log_entries")
  @@schema("auth")
}

model gotrue_identities {
  id              String
  user_id         String       @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?    @db.Timestamptz(6)
  created_at      DateTime?    @db.Timestamptz(6)
  updated_at      DateTime?    @db.Timestamptz(6)
  email           String?      @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           gotrue_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@map("identities")
  @@schema("auth")
}

model gotrue_instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@map("instances")
  @@schema("auth")
}

model gotrue_mfa_amr_claims {
  session_id            String          @db.Uuid
  created_at            DateTime        @db.Timestamptz(6)
  updated_at            DateTime        @db.Timestamptz(6)
  authentication_method String
  id                    String          @id(map: "amr_id_pk") @db.Uuid
  sessions              gotrue_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@map("mfa_amr_claims")
  @@schema("auth")
}

model gotrue_mfa_challenges {
  id          String             @id @db.Uuid
  factor_id   String             @db.Uuid
  created_at  DateTime           @db.Timestamptz(6)
  verified_at DateTime?          @db.Timestamptz(6)
  ip_address  String             @db.Inet
  mfa_factors gotrue_mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@map("mfa_challenges")
  @@schema("auth")
}

model gotrue_mfa_factors {
  id             String                  @id @db.Uuid
  user_id        String                  @db.Uuid
  friendly_name  String?
  factor_type    gotrue_factor_type
  status         gotrue_factor_status
  created_at     DateTime                @db.Timestamptz(6)
  updated_at     DateTime                @db.Timestamptz(6)
  secret         String?
  mfa_challenges gotrue_mfa_challenges[]
  users          gotrue_users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@map("mfa_factors")
  @@schema("auth")
}

model gotrue_refresh_tokens {
  instance_id String?          @db.Uuid
  id          BigInt           @id @default(autoincrement())
  token       String?          @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?          @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime?        @db.Timestamptz(6)
  updated_at  DateTime?        @db.Timestamptz(6)
  parent      String?          @db.VarChar(255)
  session_id  String?          @db.Uuid
  sessions    gotrue_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@map("refresh_tokens")
  @@schema("auth")
}

model gotrue_saml_providers {
  id                String               @id @db.Uuid
  sso_provider_id   String               @db.Uuid
  entity_id         String               @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?            @db.Timestamptz(6)
  updated_at        DateTime?            @db.Timestamptz(6)
  sso_providers     gotrue_sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@map("saml_providers")
  @@schema("auth")
}

model gotrue_saml_relay_states {
  id              String               @id @db.Uuid
  sso_provider_id String               @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?              @db.Inet
  created_at      DateTime?            @db.Timestamptz(6)
  updated_at      DateTime?            @db.Timestamptz(6)
  sso_providers   gotrue_sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@map("saml_relay_states")
  @@schema("auth")
}

model gotrue_schema_migrations {
  version String @id @db.VarChar(255)

  @@map("schema_migrations")
  @@schema("auth")
}

model gotrue_sessions {
  id             String                  @id @db.Uuid
  user_id        String                  @db.Uuid
  created_at     DateTime?               @db.Timestamptz(6)
  updated_at     DateTime?               @db.Timestamptz(6)
  factor_id      String?                 @db.Uuid
  aal            gotrue_aal_level?
  not_after      DateTime?               @db.Timestamptz(6)
  mfa_amr_claims gotrue_mfa_amr_claims[]
  refresh_tokens gotrue_refresh_tokens[]
  users          gotrue_users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@map("sessions")
  @@schema("auth")
}

model gotrue_sso_domains {
  id              String               @id @db.Uuid
  sso_provider_id String               @db.Uuid
  domain          String
  created_at      DateTime?            @db.Timestamptz(6)
  updated_at      DateTime?            @db.Timestamptz(6)
  sso_providers   gotrue_sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@map("sso_domains")
  @@schema("auth")
}

model gotrue_sso_providers {
  id                String                     @id @db.Uuid
  resource_id       String?
  created_at        DateTime?                  @db.Timestamptz(6)
  updated_at        DateTime?                  @db.Timestamptz(6)
  saml_providers    gotrue_saml_providers[]
  saml_relay_states gotrue_saml_relay_states[]
  sso_domains       gotrue_sso_domains[]

  @@map("sso_providers")
  @@schema("auth")
}

model gotrue_users {
  instance_id                 String?              @db.Uuid
  id                          String               @id @db.Uuid
  aud                         String?              @db.VarChar(255)
  role                        String?              @db.VarChar(255)
  email                       String?              @db.VarChar(255)
  encrypted_password          String?              @db.VarChar(255)
  email_confirmed_at          DateTime?            @db.Timestamptz(6)
  invited_at                  DateTime?            @db.Timestamptz(6)
  confirmation_token          String?              @db.VarChar(255)
  confirmation_sent_at        DateTime?            @db.Timestamptz(6)
  recovery_token              String?              @db.VarChar(255)
  recovery_sent_at            DateTime?            @db.Timestamptz(6)
  email_change_token_new      String?              @db.VarChar(255)
  email_change                String?              @db.VarChar(255)
  email_change_sent_at        DateTime?            @db.Timestamptz(6)
  last_sign_in_at             DateTime?            @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?            @db.Timestamptz(6)
  updated_at                  DateTime?            @db.Timestamptz(6)
  phone                       String?              @unique
  phone_confirmed_at          DateTime?            @db.Timestamptz(6)
  phone_change                String?              @default("")
  phone_change_token          String?              @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?            @db.Timestamptz(6)
  confirmed_at                DateTime?            @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?              @default("") @db.VarChar(255)
  email_change_confirm_status Int?                 @default(0) @db.SmallInt
  banned_until                DateTime?            @db.Timestamptz(6)
  reauthentication_token      String?              @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?            @db.Timestamptz(6)
  is_sso_user                 Boolean              @default(false)
  deleted_at                  DateTime?            @db.Timestamptz(6)
  identities                  gotrue_identities[]
  mfa_factors                 gotrue_mfa_factors[]
  sessions                    gotrue_sessions[]
  Users                       Users[]

  @@index([instance_id])
  @@map("users")
  @@schema("auth")
}

enum gotrue_aal_level {
  aal1
  aal2
  aal3

  @@map("aal_level")
  @@schema("auth")
}

enum gotrue_factor_status {
  unverified
  verified

  @@map("factor_status")
  @@schema("auth")
}

enum gotrue_factor_type {
  totp
  webauthn

  @@map("factor_type")
  @@schema("auth")
}

// Public Schema

model Users {
  id String @id @db.Uuid

  auth_usersId String       @db.Uuid
  auth_user    gotrue_users @relation(fields: [auth_usersId], references: [id])

  @@schema("public")
}
